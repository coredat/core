

/*
  Warning:
  This file is auto_generated any changes here may be overwritten.
*/


#include <3rdparty/imgui/imgui.h>
#include \"debug_ui_{{data_name}}.hpp\"


namespace Debug_menu {


% ui_name = data_name.gsub('_', ' ').capitalize
void
display_{{data_name}}(const {{namespace}}::{{data_type}} *data)
{
  ImGui::Begin(\"{{ui_name}}\");
  {
    // Container Summary
    ImGui::TextWrapped(\"{{ui_name}} container\");
    ImGui::TextWrapped(\"size/capacity: %zu/%zu\", data->size, data->capacity);
    ImGui::Separator();

    // List contents
    for(size_t i = 0; i < data->size; ++i)
    {
      // Key
      ImGui::Text(\"Key: %d\", data->{{key_name}}[i]);

    % properties.each do |prop|
      % display_name = prop[:name].gsub('_', ' ').gsub('property ', '').capitalize
      % if prop[:type] == "char"
      // Get {{prop[:name]}}
      const char *{{prop[:name]}}_str;
      {{namespace}}::{{data_name}}_get_{{prop[:name]}}(data, data->entity_id[i], &{{prop[:name]}}_str);
      ImGui::Text(\"{{display_name}} %s\", {{prop[:name]}}_str);
      % elsif prop[:type] == "uint32_t" || prop[:type] == "uint64_t" || prop[:type] == "int32_t" || prop[:type] == "int64_t"
      // Get {{prop[:name].gsub("_", " ")}}
      {{prop[:type]}} {{prop[:name]}}_value;
      {{namespace}}::{{data_name}}_get_{{prop[:name]}}(data, data->entity_id[i], &{{prop[:name]}}_value);
      ImGui::Text(\"{{display_name}}: %d\", {{prop[:name]}}_value);
      % elsif prop[:type] == "uintptr_t"
      // Get {{prop[:name]}}
      {{prop[:type]}} {{prop[:name]}}_value;
      {{namespace}}::{{data_name}}_get_{{prop[:name]}}(data, data->entity_id[i], &{{prop[:name]}}_value);
      ImGui::Text(\"{{display_name}}: %p\", (void*){{prop[:name]}}_value);
      % end
    % end
      ImGui::Separator();
    }

  }
  ImGui::End();
}


} // ns
