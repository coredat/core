/*
  Text Shader
  --
  This generates text by generating quads on the fly.
*/

/* VERT_SHD */

#version 330 core

/*
  No Input!
*/

/*
  Output
*/
out int gs_in_vert_id;


/*
  Program
*/
void
main()
{
  gs_in_vert_id = gl_VertexID;
}

/* VERT_SHD */

//====================================================================//

/* GEO_SHD */

#version 330

#define VERTS_IN_QUAD 6
#define DATA_STRIDE_METRIC_DATA 3


uniform mat4 uni_wvp_mat;

uniform sampler1D uni_metrics;
uniform sampler1D uni_string;


layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

/*
  Inputs
*/
in int              gs_in_vert_id[];


/*
  Outputs
*/
out vec2            in_ps_texture_coord;


/*
  Program
*/
void
main()
{
  // Get Character ID
  int char_id        = gs_in_vert_id[0];

  // Get String Data
  vec4 char_data     = texelFetch(uni_string, char_id, 0);
  int char_index     = int(char_data.r) * DATA_STRIDE_METRIC_DATA;

  // Get Font Metrics Data
  vec4 metrics_uv_st = texelFetch(uni_metrics, char_index + 0, 0);
  vec4 chunk_02      = texelFetch(uni_metrics, char_index + 1, 0);
  vec4 chunk_03      = texelFetch(uni_metrics, char_index + 2, 0);

  vec3 scale = vec3(vec2(metrics_uv_st.zw - metrics_uv_st.xy), 1.0);
  // float scale = 10000;

  // Position Tdhe vertex
    //  vec3 scaled_pos = in_vs_position * scale;

  float char_x_advance = char_data.y;
  float char_y_advance = char_data.z;

  vec3 v_position;
  vec2 v_uv;

  // Vertex 1
  v_position = vec3(0, 0, 0) * scale;
  v_position = vec3(v_position.x + char_x_advance, v_position.y + char_y_advance, v_position.z);
  v_uv       = vec2(0, 1);
  v_uv       = mix(metrics_uv_st.xy, metrics_uv_st.zw, v_uv);

  in_ps_texture_coord = v_uv;
  gl_Position = uni_wvp_mat * vec4(v_position, 1);
  EmitVertex();

    // Vertex 3
  v_position = vec3(+1, 0, 0) * scale;
  v_position = vec3(v_position.x + char_x_advance, v_position.y + char_y_advance, v_position.z);
  v_uv       = vec2(1, 1);
  v_uv       = mix(metrics_uv_st.xy, metrics_uv_st.zw, v_uv);

  in_ps_texture_coord = v_uv;
  gl_Position =  uni_wvp_mat * vec4(v_position, 1);
  EmitVertex();

  // Vertex 2
  v_position = vec3(0, +1, 0) * scale;
  v_position = vec3(v_position.x + char_x_advance, v_position.y + char_y_advance, v_position.z);
  v_uv       = vec2(0, 0);
  v_uv       = mix(metrics_uv_st.xy, metrics_uv_st.zw, v_uv);

  in_ps_texture_coord = v_uv;
  gl_Position = uni_wvp_mat * vec4(v_position, 1);
  EmitVertex();

  // Vertex 4
  v_position = vec3(+1, +1, 0) * scale;
  v_position = vec3(v_position.x + char_x_advance, v_position.y + char_y_advance, v_position.z);
  v_uv       = vec2(1, 0);
  v_uv       = mix(metrics_uv_st.xy, metrics_uv_st.zw, v_uv);

  in_ps_texture_coord = v_uv;
  gl_Position = uni_wvp_mat * vec4(v_position, 1);
  EmitVertex();

  EndPrimitive();
}

/* GEO_SHD */

//====================================================================//

/* FRAG_SHD */
#version 330 core

/*
  Input
*/
in vec2 in_ps_texture_coord;

/*
  Uniforms
*/
// uniform sampler2D uni_map_01;
uniform vec3 uni_color = vec3(1,1,1);

/*
  Output
*/
out vec4 out_frag_color;


/*
  Program
*/
void
main()
{
  // vec4 tex_sample = texture(uni_map_01, in_ps_texture_coord);
  // out_frag_color = vec4(uni_color, 1.0);
  // out_frag_color = vec4(tex_sample.rg, 1.0, 1.0);
  out_frag_color = vec4(1,1,1,1);
}

/* FRAG_SHD */
